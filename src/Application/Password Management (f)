package project;

import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;

//Email Service Implementation
class EmailService {
 private static final String SMTP_HOST = "smtp.gmail.com";
 private static final String EMAIL = "kerrandre1426@gmail.com";
 private static final String PASSWORD = "aeazdbjjuyhrtvkf";

public static boolean sendOTP(String toEmail, String otp) {
     return sendEmail(toEmail, "Your OTP Code", "Your One Time Password is: " + otp + "\nThis code will expire in 10 minutes.");
 }

 public static boolean sendNewPassword(String toEmail, String newPassword) {
     return sendEmail(toEmail, "Password Reset", "Your new password is: " + newPassword + "\nPlease change it after logging in.");
 }

 private static boolean sendEmail(String toEmail, String subject, String body) {
     try {
         Properties props = new Properties();
         props.put("mail.smtp.host", SMTP_HOST);
         props.put("mail.smtp.port", "587");
         props.put("mail.smtp.auth", "true");
         props.put("mail.smtp.starttls.enable", "true");

         Session session = Session.getInstance(props, new Authenticator() {
             @Override
             protected PasswordAuthentication getPasswordAuthentication() {
                 return new PasswordAuthentication(EMAIL, PASSWORD);
             }
         });

         Message message = new MimeMessage(session);
         message.setFrom(new InternetAddress(EMAIL));
         message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
         message.setSubject(subject);
         message.setText(body);

         Transport.send(message);
         return true;
     } catch (Exception e) {
         System.out.println("Failed to send email: " + e.getMessage());
         return false;
     }
 }
}

package project;

import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;

//File manager
class UserFileManager {
 private static final String USER_FILE = "users.txt";
 private static final String OTP_FILE = "otps.txt";

 public static void saveUser(User user) {
     try (PrintWriter writer = new PrintWriter(new FileWriter(USER_FILE, true))) {
         writer.println(user.getFirstName() + "," + user.getLastName() + "," +
                 user.getEmail() + "," + user.getUserType() + "," +
                 user.getHashedPassword() + "," +
                 String.join(";", user.getPasswordHistory()));
     } catch (IOException e) {
         System.out.println("Error saving user: " + e.getMessage());
     }
 }

 public static User loadUser(String email) {
     try (BufferedReader reader = new BufferedReader(new FileReader(USER_FILE))) {
         String line;
         while ((line = reader.readLine()) != null) {
             String[] parts = line.split(",");
             if (parts.length >= 5 && parts[2].equals(email)) {
                 User user = new User(parts[0], parts[1], parts[2], parts[3]);
                 user.setHashedPassword(parts[4]);
                 if (parts.length > 5 && !parts[5].isEmpty()) {
                     String[] history = parts[5].split(";");
                     for (String pwd : history) {
                         user.getPasswordHistory().add(pwd);
                     }
                 }
                 return user;
             }
         }
     } catch (IOException e) {
         System.out.println("Error loading user: " + e.getMessage());
     }
     return null;
 }

 public static User findUserByName(String firstName, String lastName) {
     try (BufferedReader reader = new BufferedReader(new FileReader(USER_FILE))) {
         String line;
         while ((line = reader.readLine()) != null) {
             String[] parts = line.split(",");
             if (parts.length >= 5 && parts[0].equals(firstName) && parts[1].equals(lastName)) {
                 User user = new User(parts[0], parts[1], parts[2], parts[3]);
                 user.setHashedPassword(parts[4]);
                 if (parts.length > 5 && !parts[5].isEmpty()) {
                     String[] history = parts[5].split(";");
                     for (String pwd : history) {
                         user.getPasswordHistory().add(pwd);
                     }
                 }
                 return user;
             }
         }
     } catch (IOException e) {
         System.out.println("Error finding user: " + e.getMessage());
     }
     return null;
 }

 public static void updateUser(User user) {
     List<String> lines = new ArrayList<>();
     try (BufferedReader reader = new BufferedReader(new FileReader(USER_FILE))) {
         String line;
         while ((line = reader.readLine()) != null) {
             String[] parts = line.split(",");
             if (parts.length >= 3 && parts[2].equals(user.getEmail())) {
                 line = user.getFirstName() + "," + user.getLastName() + "," +
                         user.getEmail() + "," + user.getUserType() + "," +
                         user.getHashedPassword() + "," +
                         String.join(";", user.getPasswordHistory());
             }
             lines.add(line);
         }
     } catch (IOException e) {
         System.out.println("Error reading user file: " + e.getMessage());
         return;
     }

     try (PrintWriter writer = new PrintWriter(new FileWriter(USER_FILE))) {
         for (String line : lines) {
             writer.println(line);
         }
     } catch (IOException e) {
         System.out.println("Error updating user file: " + e.getMessage());
     }
 }

 public static void saveOTP(String email, String otp) {
     try (PrintWriter writer = new PrintWriter(new FileWriter(OTP_FILE, true))) {
         writer.println(email + "," + otp + "," + System.currentTimeMillis());
     } catch (IOException e) {
         System.out.println("Error saving OTP: " + e.getMessage());
     }
 }

 public static boolean verifyOTP(String email, String enteredOTP) {
     List<String> lines = new ArrayList<>();
     boolean verified = false;
     long currentTime = System.currentTimeMillis();

     try (BufferedReader reader = new BufferedReader(new FileReader(OTP_FILE))) {
         String line;
         while ((line = reader.readLine()) != null) {
             String[] parts = line.split(",");
             if (parts.length == 3) {
                 long otpTime = Long.parseLong(parts[2]);
                 if (currentTime - otpTime < 600000) {
                     if (parts[0].equals(email) && parts[1].equals(enteredOTP)) {
                         verified = true;
                     } else {
                         lines.add(line);
                     }
                 }
             }
         }
     } catch (IOException e) {
         System.out.println("Error verifying OTP: " + e.getMessage());
     }

     try (PrintWriter writer = new PrintWriter(new FileWriter(OTP_FILE))) {
         for (String line : lines) {
             writer.println(line);
         }
     } catch (IOException e) {
         System.out.println("Error updating OTP file: " + e.getMessage());
     }

     return verified;
 }
}

package project;

import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;

//Main logic
class PasswordManager {
 private Scanner scanner;

 public PasswordManager() {
     this.scanner = new Scanner(System.in);
     initializeAdmin();
 }

 private void initializeAdmin() {
     User admin = UserFileManager.loadUser("admin@system.com");
     if (admin == null) {
         admin = new User("Admin", "Root", "admin@system.com", "admin");
         admin.setHashedPassword(PasswordUtils.hashPassword("admin"));
         UserFileManager.saveUser(admin);
     }
 }

 public boolean registerCustomer() {
 System.out.print("Enter first name: ");
 String firstName = scanner.nextLine().trim();
 if (firstName.isEmpty()) {
     System.out.println("First name cannot be empty.");
     return false;
 }

 System.out.print("Enter last name: ");
 String lastName = scanner.nextLine().trim();
 if (lastName.isEmpty()) {
     System.out.println("Last name cannot be empty.");
     return false;
 }

 System.out.print("Enter email address: ");
 String email = scanner.nextLine().trim();
 if (email.isEmpty() || !email.contains("@") || !email.contains(".")) {
     System.out.println("Invalid email address.");
     return false;
 }

 // Check if user already exists
 if (UserFileManager.loadUser(email) != null) {
     System.out.println("User with this email already exists!");
     return false;
 }

 // Generate and send OTP
 String otp = PasswordUtils.generateOTP();
 if (EmailService.sendOTP(email, otp)) {
     UserFileManager.saveOTP(email, otp);

     // Create user (password will be set after OTP verification)
     User user = new User(firstName, lastName, email, "customer");
     UserFileManager.saveUser(user);

     System.out.println("Registration successful! OTP sent to your email.");
     return true;
 } else {
     System.out.println("Failed to send OTP. Registration failed.");
     return false;
 }
}


 public User verifyOTPAndSetPassword(String email) {
     System.out.print("Enter OTP sent to your email: ");
     String enteredOTP = scanner.nextLine().trim();

     if (UserFileManager.verifyOTP(email, enteredOTP)) {
         System.out.println("OTP verified successfully!");
         User user = UserFileManager.loadUser(email);
         if (user != null) {
             return setInitialPassword(user);
         }
     } else {
         System.out.println("Invalid or expired OTP!");
     }
     return null;
 }

 private User setInitialPassword(User user) {
     System.out.println("Please set your password:");
     System.out.print("Enter new password: ");
     String password = scanner.nextLine();
     System.out.print("Confirm password: ");
     String confirmPassword = scanner.nextLine();

     if (password.equals(confirmPassword)) {
         user.setHashedPassword(PasswordUtils.hashPassword(password));
         UserFileManager.updateUser(user);
         System.out.println("Password set successfully!");
         return user;
     } else {
         System.out.println("Passwords don't match!");
         return setInitialPassword(user);
     }
 }

 public User login() {
     System.out.print("Enter email (or 'root' for admin): ");
     String identifier = scanner.nextLine().trim();

     if (identifier.equals("root")) {
         System.out.print("Enter password: ");
         String password = scanner.nextLine();
         User admin = UserFileManager.loadUser("admin@system.com");
         if (admin != null && admin.getHashedPassword().equals(PasswordUtils.hashPassword(password))) {
             System.out.println("Admin login successful!");
             return admin;
         } else {
             System.out.println("Invalid admin credentials!");
             return null;
         }
     }

     User user = UserFileManager.loadUser(identifier);
     if (user != null) {
         if (user.getHashedPassword() == null) {
             System.out.println("Please complete registration by verifying OTP first.");
             return verifyOTPAndSetPassword(identifier);
         }

         System.out.print("Enter password: ");
         String password = scanner.nextLine();
         if (user.getHashedPassword().equals(PasswordUtils.hashPassword(password))) {
             System.out.println("Login successful!");
             return user;
         } else {
             System.out.println("Invalid password!");
         }
     } else {
         System.out.println("User not found!");
     }
     return null;
 }

 public boolean changePassword(User user) {
     System.out.print("Enter current password: ");
     String currentPassword = scanner.nextLine();
     String hashedCurrent = PasswordUtils.hashPassword(currentPassword);

     if (!user.getHashedPassword().equals(hashedCurrent)) {
         System.out.println("Current password is incorrect!");
         return false;
     }

     System.out.print("Enter new password: ");
     String newPassword = scanner.nextLine();
     String hashedNew = PasswordUtils.hashPassword(newPassword);

     if (hashedNew.equals(user.getHashedPassword()) || user.checkPasswordInHistory(hashedNew)) {
         System.out.println("Cannot use previous passwords! Please choose a different password.");
         return false;
     }

     System.out.print("Confirm new password: ");
     String confirmPassword = scanner.nextLine();

     if (newPassword.equals(confirmPassword)) {
         user.setHashedPassword(hashedNew);
         UserFileManager.updateUser(user);
         System.out.println("Password changed successfully!");
         return true;
     } else {
         System.out.println("Passwords don't match!");
         return false;
     }
 }

 public boolean forgotPassword() {
     System.out.print("Enter first name: ");
     String firstName = scanner.nextLine().trim();
     System.out.print("Enter last name: ");
     String lastName = scanner.nextLine().trim();

     User user = UserFileManager.findUserByName(firstName, lastName);
     if (user != null) {
         String newPassword = PasswordUtils.generateRandomPassword();
         String hashedNew = PasswordUtils.hashPassword(newPassword);

         if (EmailService.sendNewPassword(user.getEmail(), newPassword)) {
             user.setHashedPassword(hashedNew);
             UserFileManager.updateUser(user);
             System.out.println("New password sent to your email address!");
             return true;
         } else {
             System.out.println("Failed to send email!");
         }
     } else {
         System.out.println("User not found!");
     }
     return false;
 }

 public boolean adminChangeCustomerPassword() {
     System.out.print("Enter customer email: ");
     String email = scanner.nextLine().trim();

     User customer = UserFileManager.loadUser(email);
     if (customer != null && customer.getUserType().equals("customer")) {
         System.out.print("Enter new password for customer: ");
         String newPassword = scanner.nextLine();
         String hashedNew = PasswordUtils.hashPassword(newPassword);

         customer.setHashedPassword(hashedNew);
         UserFileManager.updateUser(customer);
         System.out.println("Customer password changed successfully!");
         return true;
     } else {
         System.out.println("Customer not found!");
         return false;
     }
 }
}

package project;

import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;

//User class
class User {
 private String firstName;
 private String lastName;
 private String email;
 private String hashedPassword;
 private String userType; // "admin" or "customer"
 private List<String> passwordHistory;

 public User(String firstName, String lastName, String email, String userType) {
     this.firstName = firstName;
     this.lastName = lastName;
     this.email = email;
     this.userType = userType;
     this.passwordHistory = new ArrayList<>();
 }

 public String getFirstName() { return firstName; }
 public String getLastName() { return lastName; }
 public String getEmail() { return email; }
 public String getHashedPassword() { return hashedPassword; }
 public String getUserType() { return userType; }
 public List<String> getPasswordHistory() { return passwordHistory; }

 public void setHashedPassword(String hashedPassword) {
     if (this.hashedPassword != null) {
         passwordHistory.add(0, this.hashedPassword);
         if (passwordHistory.size() > 3) {
             passwordHistory.remove(3);
         }
     }
     this.hashedPassword = hashedPassword;
 }

 public boolean checkPasswordInHistory(String hashedPassword) {
     return passwordHistory.contains(hashedPassword);
 }
}

package project;

import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;

//Utility class
class PasswordUtils {
 public static String hashPassword(String password) {
     try {
         MessageDigest md = MessageDigest.getInstance("SHA-256");
         byte[] hashedBytes = md.digest(password.getBytes());
         StringBuilder sb = new StringBuilder();
         for (byte b : hashedBytes) {
             sb.append(String.format("%02x", b));
         }
         return sb.toString();
     } catch (NoSuchAlgorithmException e) {
         throw new RuntimeException("Error hashing password", e);
     }
 }

 public static String generateOTP() {
     Random random = new Random();
     int otp = 100000 + random.nextInt(900000);
     return String.valueOf(otp);
 }

 public static String generateRandomPassword() {
     String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%";
     Random random = new Random();
     StringBuilder sb = new StringBuilder();
     for (int i = 0; i < 8; i++) {
         sb.append(chars.charAt(random.nextInt(chars.length())));
     }
     return sb.toString();
 }
}
